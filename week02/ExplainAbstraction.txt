The definition of Abstraction is to abstract something - an idea or a need in the programming world - and make it simpler. The example given in this week's learning activity was the line of code from Python: 'print("hello world")'. The word "print" in the statement mentioned is simple and easier to remember, however we learn that it is much more complex. In reality that word - in Python - is an function, although, in C# terms: Console.WriteLine("hello world") - the equivalent - is an attribute (method) from the Console class. It takes over 3000 lines of code to implement this functionality.

In order to avoid repeating 3000 lines of code every time the user wants to print something to the console, C#, Python and many programming languages uses abstraction to simplify such a complex functionality.

The main benefit of Abstraction is that many programmers can write complex functions and assign them into objects, or rather, classes, then store it into their respective files while able to reference them in the main program file with simple calls like the one used for the learning activity: "myResume.Display();"

"myResume" is a variable assigned to the class "Resume" where we stored a "new Resume" class. Once we have declared this new variable we, then assigned variables using the same name "myResume" accompanied by the methods inside of the class, like so: "myResume._name = 'Allison Rose";". "_name" is a string variable contained inside of the class "Resume" and it represents the container for the name of the person whom is building their resume. However, inside the class "Resume" this variable is not assigned to a specific name, hence the need to assign it as shown above ("Allison Rose").

Now, the expression "myResume.Display();" is an abstraction inside of an abstraction, because inside of the "Resume" class we have an attribute called "Display()" and inside of its block we called for an attribute that is part of the "Job" class, like so: "job.DisplayJobDetails();". "DisplayJobDetails()", as mentioned, is an attribute that displays the details of the jobs entered by the user. In our case, the user created two new variables where they called for the same class, "Job" and they assigned added them to the class "Resume" then using the "myResume" variable they called for the attribute "Display()" which itself only calls for another attribute called "DisplayJobDetails()" which in turn has the following line of code: 'Console.WriteLine($"{_jobTitle} ({_company}) {_startYear}-{_endYear}");'.

So every time the user calls for the method (which the way to call for a method is by using the dot operator (".")) ".Display()" a chain of reaction will happen until it ends inside of the "Job" class and it will display the information stored in the variable that called the method (in our case "myResume").

We can clearly see how Abstraction plays an import part of our day to day programming, since we are constantly using abstractions like calling methods as explained above.